-- Blog Entries or Blog Comments that are unread
CREATE PROCEDURE unseenBlogComment (parm_user_id INT, parm_limit INT, parm_offset INT)
BEGIN

SET @lmt = parm_limit;
SET @off = parm_offset;
SET @usr = parm_user_id;

SET @sql = "SELECT be.entry_id, be.blog_id, be.active, be.user_id, be.title, 
        be.content, be.updated_dt, b.blog_name, 
        u.first_name, u.last_name, u.avatar_id, u.gender, 
        COUNT(bc.comment_id) AS comments, bv.updated_dt AS lastView
    FROM blog_entry be 
    INNER JOIN blog b 
        ON be.blog_id=b.blog_id 
    INNER JOIN users u 
        ON be.user_id=u.user_id 
    LEFT OUTER JOIN blog_comment bc
        ON be.entry_id=bc.entry_id 
        AND bc.user_id != ?
        AND ((bc.user_id NOT IN (SELECT block_id FROM site_blacklist) 
            AND bc.user_id NOT IN (SELECT block_id FROM user_blacklist WHERE user_id=?)) 
            OR bc.user_id IN (SELECT allow_id FROM user_whitelist WHERE user_id=?))
    LEFT OUTER JOIN blog_view bv 
        ON bv.entry_id=be.entry_id 
        AND bv.user_id = ?
    WHERE be.active=1
        AND (bv.updated_dt<bc.updated_dt
            OR (bv.updated_dt IS NULL 
            AND be.user_id!=?))
    GROUP BY be.entry_id, be.blog_id, be.active, be.user_id, be.title, 
        be.content, be.updated_dt, b.blog_name, u.first_name, u.last_name, 
        u.gender
    ORDER BY bc.updated_dt DESC";

SET @sql = CONCAT(@sql, ' LIMIT ', @lmt);
SET @sql = CONCAT(@sql, ' OFFSET ', @off);

PREPARE STMT FROM @sql;
EXECUTE STMT USING @usr, @usr, @usr, @usr, @usr;	
END;

-- call unseenBlogComment(12, 50, 0)
-- call unseenBlogComment(11, 50, 0)
-- call unseenBlogComment(2, 20, 0)
-- DROP PROCEDURE unseenBlogComment
